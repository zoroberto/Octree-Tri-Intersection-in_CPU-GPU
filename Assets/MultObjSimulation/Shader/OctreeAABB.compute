
struct PairIndex
{
    uint i1;
    uint i2;
};

struct BoundingBox
{
    float3 min;
    float3 max;
};

struct OctreeData
{
    float3 min;
    float3 max;
    float3 center;
    float3 size;
    uint index;
};

// variable
uint numberObj;
uint nodeCount;
uint objectIndex;

// Bind Positions
RWStructuredBuffer<float3> positions;
RWStructuredBuffer<float3> globalPositions;

// floor min and max
RWStructuredBuffer<float3> floorPositions;
RWStructuredBuffer<BoundingBox> floorBB;

// BB min and max
RWStructuredBuffer<BoundingBox> bbMinMax;
RWStructuredBuffer<int2> rangeObjIndex;

// Collsiion Floor
RWStructuredBuffer<uint> floorCollisionResult;

// Update Reverese velocities
RWStructuredBuffer<float3> velocities;

// Octree Data
RWStructuredBuffer<OctreeData> bbOctree;
RWStructuredBuffer<PairIndex> pairIndexL0;
RWStructuredBuffer<PairIndex> pairIndexL1;
RWStructuredBuffer<PairIndex> pairIndexL2;
RWStructuredBuffer<uint> collisionPairResult;
//RWStructuredBuffer<uint> rmCollisionPairResult;
RWStructuredBuffer<uint> collisionResultL0;
RWStructuredBuffer<uint> collisionResultL1;
RWStructuredBuffer<uint> collisionResultL2;

/////////////////////////////////////////////////
//  Bind Global Positions kernel
/////////////////////////////////////////////////
#pragma kernel BindGlobalPositions

[numthreads(1024, 1, 1)]
void BindGlobalPositions(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;

    if (idx >= nodeCount) return;

    globalPositions[nodeCount * objectIndex + idx] = positions[idx];

}


///////////////////////////////////////////////////
////  Find BB Min & Max kernel
///////////////////////////////////////////////////
#pragma kernel FindBBMinMax

[numthreads(1024, 1, 1)]
void FindBBMinMax(uint3 id : SV_DispatchThreadID)
{
   uint idx = id.x;

    if (idx >= numberObj) return;

    uint start = rangeObjIndex[idx].x;
    uint end = rangeObjIndex[idx].y;


    float3 min_value = globalPositions[start];
    float3 max_value = globalPositions[start];

    for (int i = start; i < end; i++)
    {
        float3 vertex = globalPositions[i];

        min_value = min(min_value, vertex); // 최소값 업데이트
        max_value = max(max_value, vertex); // 최대값 업데이트
    }

    bbMinMax[idx].min = min_value;
    bbMinMax[idx].max = max_value;

}


///////////////////////////////////////////////////
////  Initialize Octree kernel
///////////////////////////////////////////////////
#pragma kernel ImplementOctree

[numthreads(1024, 1, 1)]
void ImplementOctree(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;

    if (idx >= numberObj ) return;

    // Lv0, Initialize Lv0 
    bbOctree[idx * 73].center = (bbMinMax[idx].max + bbMinMax[idx].min) / 2;
    bbOctree[idx * 73].size = bbMinMax[idx].max - bbMinMax[idx].min;

    bbOctree[idx * 73].min = bbMinMax[idx].min; // min value Lv0
    bbOctree[idx * 73].max = bbMinMax[idx].max; // max value Lv0

    
    float3 center = bbOctree[idx * 73].center;
    float3 size = bbOctree[idx * 73].size;

    // Lv1, Split to 8 children
    bbOctree[idx * 73 + 1].center.x = center.x - (size.x / 4);
    bbOctree[idx * 73 + 1].center.y = center.y + (size.y / 4);
    bbOctree[idx * 73 + 1].center.z = center.z - (size.z / 4);

    bbOctree[idx * 73 + 2].center.x = center.x + (size.x / 4);
    bbOctree[idx * 73 + 2].center.y = center.y + (size.y / 4);
    bbOctree[idx * 73 + 2].center.z = center.z - (size.z / 4);

    bbOctree[idx * 73 + 3].center.x = center.x - (size.x / 4);
    bbOctree[idx * 73 + 3].center.y = center.y - (size.y / 4);
    bbOctree[idx * 73 + 3].center.z = center.z - (size.z / 4);

    bbOctree[idx * 73 + 4].center.x = center.x + (size.x / 4);
    bbOctree[idx * 73 + 4].center.y = center.y - (size.y / 4);
    bbOctree[idx * 73 + 4].center.z = center.z - (size.z / 4);

    bbOctree[idx * 73 + 5].center.x = center.x - (size.x / 4);
    bbOctree[idx * 73 + 5].center.y = center.y + (size.y / 4);
    bbOctree[idx * 73 + 5].center.z = center.z + (size.z / 4);

    bbOctree[idx * 73 + 6].center.x = center.x + (size.x / 4);
    bbOctree[idx * 73 + 6].center.y = center.y + (size.y / 4);
    bbOctree[idx * 73 + 6].center.z = center.z + (size.z / 4);

    bbOctree[idx * 73 + 7].center.x = center.x - (size.x / 4);
    bbOctree[idx * 73 + 7].center.y = center.y - (size.y / 4);
    bbOctree[idx * 73 + 7].center.z = center.z + (size.z / 4);

    bbOctree[idx * 73 + 8].center.x = center.x + (size.x / 4);
    bbOctree[idx * 73 + 8].center.y = center.y - (size.y / 4);
    bbOctree[idx * 73 + 8].center.z = center.z + (size.z / 4);
    
    float3 sizeBB = bbOctree[idx * 73].size;

    for (int j = 1; j <= 8; j++)
    {
        // Lv1, min and max
        bbOctree[idx * 73 + j].min.x = bbOctree[idx * 73 + j].center.x - (sizeBB.x / 4);
        bbOctree[idx * 73 + j].min.y = bbOctree[idx * 73 + j].center.y - (sizeBB.y / 4);
        bbOctree[idx * 73 + j].min.z = bbOctree[idx * 73 + j].center.z - (sizeBB.z / 4);

        bbOctree[idx * 73 + j].max.x = bbOctree[idx * 73 + j].center.x + (sizeBB.x / 4);
        bbOctree[idx * 73 + j].max.y = bbOctree[idx * 73 + j].center.y + (sizeBB.y / 4);
        bbOctree[idx * 73 + j].max.z = bbOctree[idx * 73 + j].center.z + (sizeBB.z / 4);

        // Lv2, Split to 64 children
        bbOctree[idx * 73 + j * 8 + 1].center.x = bbOctree[idx * 73 + j].center.x - (sizeBB.x / 8);
        bbOctree[idx * 73 + j * 8 + 1].center.y = bbOctree[idx * 73 + j].center.y + (sizeBB.y / 8);
        bbOctree[idx * 73 + j * 8 + 1].center.z = bbOctree[idx * 73 + j].center.z - (sizeBB.z / 8);
                                                  
        bbOctree[idx * 73 + j * 8 + 2].center.x = bbOctree[idx * 73 + j].center.x + (sizeBB.x / 8);
        bbOctree[idx * 73 + j * 8 + 2].center.y = bbOctree[idx * 73 + j].center.y + (sizeBB.y / 8);
        bbOctree[idx * 73 + j * 8 + 2].center.z = bbOctree[idx * 73 + j].center.z - (sizeBB.z / 8);
                                              
        bbOctree[idx * 73 + j * 8 + 3].center.x = bbOctree[idx * 73 + j].center.x - (sizeBB.x / 8);
        bbOctree[idx * 73 + j * 8 + 3].center.y = bbOctree[idx * 73 + j].center.y - (sizeBB.y / 8);
        bbOctree[idx * 73 + j * 8 + 3].center.z = bbOctree[idx * 73 + j].center.z - (sizeBB.z / 8);
                                                 
        bbOctree[idx * 73 + j * 8 + 4].center.x = bbOctree[idx * 73 + j].center.x + (sizeBB.x / 8);
        bbOctree[idx * 73 + j * 8 + 4].center.y = bbOctree[idx * 73 + j].center.y - (sizeBB.y / 8);
        bbOctree[idx * 73 + j * 8 + 4].center.z = bbOctree[idx * 73 + j].center.z - (sizeBB.z / 8);
                                              
        bbOctree[idx * 73 + j * 8 + 5].center.x = bbOctree[idx * 73 + j].center.x - (sizeBB.x / 8);
        bbOctree[idx * 73 + j * 8 + 5].center.y = bbOctree[idx * 73 + j].center.y + (sizeBB.y / 8);
        bbOctree[idx * 73 + j * 8 + 5].center.z = bbOctree[idx * 73 + j].center.z + (sizeBB.z / 8);
                                             
        bbOctree[idx * 73 + j * 8 + 6].center.x = bbOctree[idx * 73 + j].center.x + (sizeBB.x / 8);
        bbOctree[idx * 73 + j * 8 + 6].center.y = bbOctree[idx * 73 + j].center.y + (sizeBB.y / 8);
        bbOctree[idx * 73 + j * 8 + 6].center.z = bbOctree[idx * 73 + j].center.z + (sizeBB.z / 8);
                                         
        bbOctree[idx * 73 + j * 8 + 7].center.x = bbOctree[idx * 73 + j].center.x - (sizeBB.x / 8);
        bbOctree[idx * 73 + j * 8 + 7].center.y = bbOctree[idx * 73 + j].center.y - (sizeBB.y / 8);
        bbOctree[idx * 73 + j * 8 + 7].center.z = bbOctree[idx * 73 + j].center.z + (sizeBB.z / 8);
                                           
        bbOctree[idx * 73 + j * 8 + 8].center.x = bbOctree[idx * 73 + j].center.x + (sizeBB.x / 8);
        bbOctree[idx * 73 + j * 8 + 8].center.y = bbOctree[idx * 73 + j].center.y - (sizeBB.y / 8);
        bbOctree[idx * 73 + j * 8 + 8].center.z = bbOctree[idx * 73 + j].center.z + (sizeBB.z / 8);

        for (int k = 1; k <= 8; k++)
        {
            // Lv2, min and max
            bbOctree[idx * 73 + j * 8 + k].min.x = bbOctree[idx * 73 + j * 8 + k].center.x - (sizeBB.x / 8);
            bbOctree[idx * 73 + j * 8 + k].min.y = bbOctree[idx * 73 + j * 8 + k].center.y - (sizeBB.y / 8);
            bbOctree[idx * 73 + j * 8 + k].min.z = bbOctree[idx * 73 + j * 8 + k].center.z - (sizeBB.z / 8);
                                                                                                         
            bbOctree[idx * 73 + j * 8 + k].max.x = bbOctree[idx * 73 + j * 8 + k].center.x + (sizeBB.x / 8);
            bbOctree[idx * 73 + j * 8 + k].max.y = bbOctree[idx * 73 + j * 8 + k].center.y + (sizeBB.y / 8);
            bbOctree[idx * 73 + j * 8 + k].max.z = bbOctree[idx * 73 + j * 8 + k].center.z + (sizeBB.z / 8);
        }
    }
}


/////////////////////////////////////////////////
//  Check Collision Lv0 Compute kernel
/////////////////////////////////////////////////
#pragma kernel CheckCollisionL0

[numthreads(1024, 1, 1)]
void CheckCollisionL0(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;

    if (idx >= pairIndexL0.Length) return;

    PairIndex pair = pairIndexL0[idx];
    uint i1 = pair.i1;
    uint i2 = pair.i2;

    OctreeData b1 = bbOctree[i1];
    OctreeData b2 = bbOctree[i2];
    bbOctree[i1].index = i1; // update pair index of octree by i1
    bbOctree[i2].index = i2; // update pair index of octree by i2

    // AABB collision detection
    bool collide =
        b1.min.x <= b2.max.x &&
        b1.max.x >= b2.min.x &&
        b1.min.y <= b2.max.y &&
        b1.max.y >= b2.min.y &&
        b1.min.z <= b2.max.z &&
        b1.max.z >= b2.min.z;


    if (collide)
    {
        // update collisioin Pair Result by octree index
        collisionPairResult[bbOctree[i1].index] = 1;
        collisionPairResult[bbOctree[i2].index] = 1;
    }

    collisionResultL0[idx] = collide ? 1 : 0;
}

/////////////////////////////////////////////////
//  Check Collision Lv0 Compute kernel
/////////////////////////////////////////////////
#pragma kernel CheckCollisionL1

[numthreads(1024, 1, 1)]
void CheckCollisionL1(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;

    if (idx >= pairIndexL1.Length) return;

    PairIndex pair = pairIndexL1[idx];
    uint i1 = pair.i1;
    uint i2 = pair.i2; 

    // Find parental Octree data index
    uint index_obj1 = floor(float(i1) / 73.0f) * 73;
    uint index_obj2 = floor(float(i2) / 73.0f) * 73; 

    // check collision Lv0, collision-free detection occure!!
    OctreeData obj1 = bbOctree[index_obj1];
    OctreeData obj2 = bbOctree[index_obj2];

    bool collideLv0 =
        obj1.min.x <= obj2.max.x &&
        obj1.max.x >= obj2.min.x &&
        obj1.min.y <= obj2.max.y &&
        obj1.max.y >= obj2.min.y &&
        obj1.min.z <= obj2.max.z &&
        obj1.max.z >= obj2.min.z;

    if (collideLv0)
    {
        // check collision Octree Lv1
        OctreeData b1 = bbOctree[i1];
        OctreeData b2 = bbOctree[i2];

        if (
            b1.min.x <= b2.max.x &&
            b1.max.x >= b2.min.x &&
            b1.min.y <= b2.max.y &&
            b1.max.y >= b2.min.y &&
            b1.min.z <= b2.max.z &&
            b1.max.z >= b2.min.z)
        {
            collisionResultL1[idx] = 1;
        }
        else collisionResultL1[idx] = 0;
    }
    else collisionResultL1[idx] = 0;
}

/////////////////////////////////////////////////
//  Check Collision Lv2 Compute kernel
/////////////////////////////////////////////////

int calcIndexObjectLevel0(int object_index)
{
    uint level = floor(float(object_index) / 73.0f);

    if (level != 0) return level * 73;
    return floor(float(object_index) / 73.0f);
}

int calcIndexObjectLevel1(int object_index)
{
    uint level = floor(float(object_index) / 73.0f);
    
    if (level == 1) return floor(float((object_index - 1 + level) / 8.0f) + level * 64);
    if (level == 2) return floor(float((object_index - 1 + level) / 8.0f) + level * 64);

    return floor(float((object_index - 1) / 8) + level * 64);
}

#pragma kernel CheckCollisionL2

[numthreads(1024, 1, 1)]
void CheckCollisionL2(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;

    if (idx >= pairIndexL2.Length) return;

    PairIndex pair = pairIndexL2[idx];
    uint i1 = pair.i1;
    uint i2 = pair.i2;

    uint l0_index_obj1 = calcIndexObjectLevel0(i1);
    uint l0_index_obj2 = calcIndexObjectLevel0(i2);

    uint l1_index_obj1 = calcIndexObjectLevel1(i1);
    uint l1_index_obj2 = calcIndexObjectLevel1(i2);

    OctreeData b1 = bbOctree[i1];
    OctreeData b2 = bbOctree[i2];

    // check collision Lv0
    OctreeData l0_obj1 = bbOctree[l0_index_obj1];
    OctreeData l0_obj2 = bbOctree[l0_index_obj2];

    OctreeData l1_obj1 = bbOctree[l1_index_obj1];
    OctreeData l1_obj2 = bbOctree[l1_index_obj2];

    //bool collideLv0 =
    //    l0_obj1.min.x <= l0_obj2.max.x &&
    //    l0_obj1.max.x >= l0_obj2.min.x &&
    //    l0_obj1.min.y <= l0_obj2.max.y &&
    //    l0_obj1.max.y >= l0_obj2.min.y &&
    //    l0_obj1.min.z <= l0_obj2.max.z &&
    //    l0_obj1.max.z >= l0_obj2.min.z;

    //if (collideLv0)
    //{
    //    // check collision Lv1
    //    OctreeData l1_obj1 = bbOctree[l1_index_obj1];
    //    OctreeData l1_obj2 = bbOctree[l1_index_obj2];

    //    bool collideLv1 =
    //        
    //        
    //        
    //        
    //        
    //        

    //    if (collideLv1) 
    //    { 
    //        // check collision Octree Lv2
    //        OctreeData b1 = bbOctree[i1];
    //        OctreeData b2 = bbOctree[i2];

    //        if (
    //            b1.min.x <= b2.max.x &&
    //            b1.max.x >= b2.min.x &&
    //            b1.min.y <= b2.max.y &&
    //            b1.max.y >= b2.min.y &&
    //            b1.min.z <= b2.max.z &&
    //            b1.max.z >= b2.min.z)
    //        {
    //            collisionResultL2[idx] = 1;

    //        }
    //        else collisionResultL2[idx] = 0;
    //    }
    //    else collisionResultL2[idx] = 0;
    //}
    //else collisionResultL2[idx] = 0;


    if (!(
        l0_obj1.min.x <= l0_obj2.max.x &&
        l0_obj1.max.x >= l0_obj2.min.x &&
        l0_obj1.min.y <= l0_obj2.max.y &&
        l0_obj1.max.y >= l0_obj2.min.y &&
        l0_obj1.min.z <= l0_obj2.max.z &&
        l0_obj1.max.z >= l0_obj2.min.z))
        collisionResultL2[idx] = 0;
       

    if (!(
        l1_obj1.min.x <= l1_obj2.max.x &&
        l1_obj1.max.x >= l1_obj2.min.x &&
        l1_obj1.min.y <= l1_obj2.max.y &&
        l1_obj1.max.y >= l1_obj2.min.y &&
        l1_obj1.min.z <= l1_obj2.max.z &&
        l1_obj1.max.z >= l1_obj2.min.z))
        collisionResultL2[idx] = 0;

    bool collideLv0 =
        b1.min.x <= b2.max.x &&
        b1.max.x >= b2.min.x &&
        b1.min.y <= b2.max.y &&
        b1.max.y >= b2.min.y &&
        b1.min.z <= b2.max.z &&
        b1.max.z >= b2.min.z;
    collisionResultL2[idx] = collideLv0 ? 1 : 0;
}
